{"version":3,"file":"select-input-min.js","sources":["../src/dom-component.js","../src/defaults.js","../src/select-input.js"],"sourcesContent":["const d = document;\r\n\r\nexport default class DomComponent {\r\n    constructor(element, options = {}, defaults = {}) {\r\n        this.options = Object.assign({}, defaults, options);\r\n\r\n        this._events = [];\r\n\r\n        this.dom = {\r\n            el: this._setElement(element)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Bind a (delegated) event\r\n     * @param {String} event\r\n     * @param {Function} fn\r\n     * @param {HTMLElement|Document} el\r\n     * @return DomComponent\r\n     */\r\n    on(event, fn, el = null) {\r\n\r\n        (el || this.dom.el).addEventListener(event, fn = fn.bind(this), true);\r\n\r\n        this._events.push({\r\n            name: event,\r\n            fn: fn,\r\n            el: el\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the main wrapping element\r\n     * @return {Element}\r\n     */\r\n    getElement() {\r\n        return this.dom.el;\r\n    }\r\n\r\n    /**\r\n     * Unbind all events and nullify references\r\n     * @return void\r\n     */\r\n    remove() {\r\n        this._events = this._events.filter(event => {\r\n            return (event.el || this.dom.el).removeEventListener(event.name, event.fn, true);\r\n        });\r\n        this.dom.el.parentNode.removeChild(this.dom.el);\r\n        this.dom = this.options = null;\r\n    }\r\n\r\n    /**\r\n     * Query the element in the DOM if its a string\r\n     * @param {Element|String} el\r\n     * @return {Element|null}\r\n     * @protected\r\n     */\r\n    _setElement(el) {\r\n        if (!el && !el.nodeType && typeof el !== 'string') {\r\n            throw new Error('Wrong element type provided!');\r\n        }\r\n        if (el.nodeType) return el;\r\n        return (this.options.parent || d).querySelector(el);\r\n    }\r\n\r\n    /**\r\n     * Communicate changes\r\n     * @param {String} name\r\n     * @param {Object|null} detail\r\n     * @protected\r\n     */\r\n    _trigger(name, detail = null) {\r\n        let event;\r\n\r\n        if (typeof CustomEvent === 'function') {\r\n            event = new CustomEvent(name, {\r\n                detail: detail,\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n        } else {\r\n            event = d.createEvent('Event');\r\n            event.initEvent(name, true, true);\r\n        }\r\n\r\n        this.dom.el.dispatchEvent(event);\r\n    }\r\n}\r\n","export default {\r\n    parent: null,\r\n    items: [],\r\n    current: null,\r\n    allowAdd: true,\r\n    proposal: 'Add {X} to the list?',\r\n    notFound: '{X} not present in the list',\r\n    allowRemove: true,\r\n    removalIcon: '&times;',\r\n    placeHolder: 'Type to search',\r\n    sort: true,\r\n    order: 'desc',\r\n    maxHeight: 0,\r\n    onDelete: null,\r\n    onCreate: null,\r\n    valueKey: 'value',\r\n    textKey: 'value'\r\n}\r\n","import DomHelper from \"./dom-component.js\";\nimport defaults from \"./defaults.js\";\n\nconst d = document;\n\nexport default class SelectInput extends DomHelper {\n    constructor(element, options = {}) {\n        super(element, options, defaults);\n        let current = options.current ? this._convertItem(options.current) : null;\n\n        this.options.items = this._convertItems(options.items);\n        this.current = this.findItem(current[options.valueKey]);\n\n        // search result caching\n        this.__found = null;\n\n        if (this.options.sort) this._sortItems();\n\n        this._renderInit();\n\n        this._bindEvents();\n\n        if (this.current) {\n            this.dom.input.value = this.current[options.textKey];\n        }\n    }\n\n    /**\n     * Bind all (delegated) DOM events\n     * @private\n     */\n    _bindEvents() {\n        let closeOnEvent = e => {\n            if ((e.key === 'Escape' || e.keyCode === 27) || !this.dom.el.contains(e.target)) {\n                this.toggle(false)\n            }\n        };\n\n        this.on('input', this._search);\n        this.on('click', this._handleClick);\n        this.on('keyup', this._handleKey);\n        this.on('focusin', () => (this._renderListItems().toggle(true)), this.dom.input);\n\n        // Close the list on `Escape` or on a click outside the main element\n        this.on('keyup', closeOnEvent, d);\n        this.on('click', closeOnEvent, d);\n    }\n\n    /**\n     * Store the deletion callback\n     * @param {Function} fn\n     * @return SelectInput\n     */\n    onDelete(fn) {\n        this.options.onDelete = fn;\n        return this;\n    }\n\n    /**\n     * Store the creation callback\n     * @param {Function} fn\n     * @return SelectInput\n     */\n    onCreate(fn) {\n        this.options.onCreate = fn;\n        return this;\n    }\n\n    /**\n     * Show/hide the dropdown\n     * @param {Boolean} show\n     * @return DomHelper\n     */\n    toggle(show = false) {\n        this.dom.el.firstElementChild.classList[show ? 'remove' : 'add']('si-hide');\n        if (!show) this.dom.input.blur();\n        return this;\n    }\n\n    /**\n     * Get all items in the list\n     * @return {Object[]}\n     */\n    getItems() {\n        return this.options.items;\n    }\n\n    /**\n     * Return the current field value object\n     * @return {{value: String|Number}|null}\n     */\n    getCurrent(key = null) {\n        let current = Object.assign({}, this.current);\n        delete current._lc_value;\n        delete current._lc_text;\n        return key ? current[key] : current;\n    }\n\n    /**\n     * Clear the current value\n     * @return void\n     * @private\n     */\n    clearCurrent() {\n        this.current = null;\n        this.dom.input.value = '';\n        this._clearSelected();\n    }\n\n    /**\n     * Find an item in the list\n     * @param {EventTarget|HTMLElement|String|Number} value\n     * @return {{}}\n     */\n    findItem(value) {\n        let opt = this.options;\n        value = value.nodeName ? value.dataset.value : value;\n        return opt.items.find(item => item[opt.valueKey] === value);\n    }\n\n    /**\n     * Set the current value by its string\n     * @param {String|undefined} value\n     * @return SelectInput\n     */\n    setCurrent(value) {\n        this._setCurrent(value ? this.findItem(value) : null);\n        return this;\n    }\n\n    /**\n     * Set the current value of the field\n     * @param {EventTarget|null} el\n     * @param {Object|null} item\n     * @return SelectInput\n     * @private\n     */\n    _setCurrent(item, el = null) {\n        this.dom.input.value = item ? item[this.options.textKey].toString() : '';\n        if (item) {\n            this.current = item;\n            this._setSelected(item, el);\n        } else {\n            this.current = null;\n            this._clearSelected();\n        }\n        return this;\n    }\n\n    /**\n     * Updated selected item in the html list\n     * @param {Object} item\n     * @param {EventTarget|HTMLElement|null} el\n     * @private\n     */\n    _setSelected(item, el = null) {\n        this._clearSelected();\n        el = el ? el : this.dom.list.querySelector(`li[data-value=\"${item[this.options.valueKey]}\"]`);\n        if (el) el.classList.add('si-current');\n    }\n\n    /**\n     * Remove the classname of current `<li>`\n     * @private\n     */\n    _clearSelected() {\n        let current = this.dom.list.querySelector('.si-current');\n        if (current) current.classList.remove('si-current');\n    }\n\n    /**\n     * Make an array of objects\n     * @param {Array} items\n     * @return {Object[]}\n     * @private\n     */\n    _convertItems(items = []) {\n        return items.map(item => this._convertItem(item))\n    }\n\n    /**\n     * Normalize an item as an usable object\n     * @param {String|Number|{value: String|Number, _lc_value: String, _lc_text: String}} item\n     * @return {{value: String|Number, _lc_value: String, _lc_text: String}}\n     * @private\n     */\n    _convertItem(item) {\n        let opt = this.options;\n        item = typeof item !== 'object' ? {[opt.valueKey]: item, [opt.textKey]: item} : item;\n        item._lc_value = item[opt.valueKey].toString().toLowerCase().replace(/\\s+/g, '-');\n        item._lc_text = item[opt.textKey].toString().toLowerCase().replace(/\\s+/g, '-');\n        return item;\n    }\n\n    /**\n     * Create the HTML upon instantiation\n     * @return {Node}\n     * @private\n     */\n    _renderInit() {\n        let wrap = d.createElement('div');\n\n        wrap.className = 'si-wrap si-hide';\n\n        this.dom.input = wrap.appendChild(this._renderInput()).firstChild;\n        this.dom.list = wrap.appendChild(this._renderList()).firstChild;\n\n        return this.dom.el.appendChild(wrap);\n    }\n\n    /**\n     * Create the input element\n     * @return {HTMLDivElement}\n     * @private\n     */\n    _renderInput() {\n        let wrap = d.createElement('div'),\n            el = d.createElement('input');\n        wrap.className = 'si-input';\n        el.type = 'text';\n        el.autocomplete = 'false';\n        el.spellcheck = false;\n        el.placeholder = this.options.placeHolder;\n        wrap.appendChild(el);\n        return wrap;\n    }\n\n    /**\n     * Create the list element\n     * @return {HTMLDivElement}\n     * @private\n     */\n    _renderList() {\n        let wrap = d.createElement('div'),\n            el = d.createElement('ul'),\n            maxHeight = this.options.maxHeight;\n\n        wrap.className = 'si-list';\n        if (maxHeight) wrap.style.maxHeight = maxHeight + 'px';\n        wrap.appendChild(el);\n\n        return wrap;\n    }\n\n    /**\n     * Create the list items\n     * @param {Object[]} items\n     * @return {String}\n     * @private\n     */\n    _createListItems(items = []) {\n        let list = '',\n            opt = this.options,\n            current = this.getCurrent(opt.valueKey),\n            selected = '',\n            button = opt.allowRemove ? this._createRemovalButton() : '',\n            value = '',\n            text = '';\n\n        items.forEach(item => {\n            value = item[opt.valueKey];\n            text = item[opt.textKey];\n            selected = current && value === current ? ' si-current' : '';\n            list += `<li class=\"si-item${selected}\" data-value=\"${value}\">${text}${button}</li>`;\n        });\n\n        return list;\n    }\n\n    /**\n     * Insert the set of li's in the DOM\n     * @param html\n     * @return SelectInput\n     * @private\n     */\n    _renderListItems(html = '') {\n        this.dom.list.innerHTML = html || this._createListItems(this.options.items);\n        return this;\n    }\n\n    /**\n     * Item removal button template\n     * @return {String}\n     * @private\n     */\n    _createRemovalButton() {\n        return `<button type=\"button\" class=\"si-removal\">${this.options.removalIcon}</button>`;\n    }\n\n    /**\n     * Search and update the list upon typing\n     * @param {KeyboardEvent} e\n     * @private\n     */\n    _search(e) {\n        let options = this.options,\n            term = e.target.value,\n            termLc = term.toLowerCase().replace(/\\s+/g, '-'),\n            list = options.items.filter(item => {\n                return item._lc_value.indexOf(termLc) !== -1 || item._lc_text.indexOf(termLc) !== -1;\n            }),\n            html = list || options.allowAdd ? this._createListItems(list) : '',\n            first = list[0],\n            len = list.length;\n\n        if (len === 1) {\n            this.__found = first;\n        }\n\n        if (len > 1 || !len || !term) {\n            this.__found = null;\n        }\n\n        if (options.allowAdd && term && (!first || termLc !== first._lc_text && termLc !== first._lc_value)) {\n            html += this._proposeItem(term)\n        } else if (!options.allowAdd) {\n            html += this._notFoundItem(term);\n        }\n\n        this._renderListItems(html);\n    }\n\n    /**\n     * Create the item creation list item\n     * @param {String} term\n     * @return {String}\n     * @private\n     */\n    _proposeItem(term) {\n        let proposal = this.options.proposal.replace('{X}', `<span>${term}</span>`);\n        return `<li class=\"si-item si-append si-proposal\" data-term=\"${term}\">${proposal}</li>`\n    }\n\n    /**\n     * Create a 'not found' message as a list item\n     * @param {String} term\n     * @return {String}\n     * @private\n     */\n    _notFoundItem(term) {\n        let txt = this.options.notFound.replace('{X}', `<span>${term}</span>`);\n        return `<li class=\"si-item si-append si-not-found\">${txt}</li>`\n    }\n\n    /**\n     * Decide what to do when user clicks inside the component\n     * @param {MouseEvent} e\n     * @private\n     */\n    _handleClick(e) {\n        let el = e.target,\n            classList = el.classList;\n\n        if (this.options.allowAdd && classList.contains('si-proposal')) {\n            if (this._tryCreateItem(el.dataset.term)) {\n                this.toggle()._trigger('created', this.current);\n            }\n            return;\n        }\n\n        if (classList.contains('si-item')) {\n            this._setCurrent(this.findItem(el), el)\n                .toggle()\n                ._trigger('selected', this.current);\n            return;\n        }\n\n        if (this.options.allowRemove && classList.contains('si-removal')) {\n            el = el.parentNode;\n            if (this._fireCallback('onDelete', this.findItem(el))) {\n                this._trigger('removed', this._sliceItem(el));\n            }\n        }\n    }\n\n    /**\n     * The `onCreate` and `onDelete` callbacks allow to prevent their respective actions\n     * @param {String} name\n     * @param {Object} item\n     * @return {Boolean}\n     * @private\n     */\n    _fireCallback(name, item) {\n        if (typeof this.options[name] === 'function') {\n            return this.options[name](item);\n        }\n        return true;\n    }\n\n    /**\n     * Handle `Enter` when there is a value in the field\n     * @param {KeyboardEvent} e\n     * @private\n     */\n    _handleKey(e) {\n        let value = e.target.value,\n            item = this.__found,\n            event;\n\n        if (!!value && (e.keyCode !== 13 || e.key !== 'Enter')) {\n            return;\n        }\n\n        if (!item && value && this.options.allowAdd) {\n            event = this._tryCreateItem(value) ? 'created' : null;\n        } else if (item) {\n            event = 'selected';\n            this._setCurrent(item);\n        }\n\n        if (event) this.toggle()._trigger(event, this.current);\n    }\n\n    /**\n     * If the value doesn't exist and the callback returns true, create and set as current\n     * @param value\n     * @return {boolean}\n     * @private\n     */\n    _tryCreateItem(value) {\n        let item = this._convertItem(value.trim());\n        if (!this.findItem(value) && this._fireCallback('onCreate', item)) {\n            this._setCurrent(this._insertItem(item));\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Insert a new item in the list\n     * @param {{value: String|Number, _lc_value: String, _lc_text: String}} item\n     * @return {{value: String|Number, _lc_value: String, _lc_text: String}}\n     * @private\n     */\n    _insertItem(item) {\n        this.options.items.push(item);\n        if (this.options.sort) this._sortItems();\n        return item;\n    }\n\n    /**\n     * Rearrange the list\n     * @private\n     */\n    _sortItems() {\n        let order = this.options.order === 'desc' ? 1 : -1;\n        this.options.items.sort((a, b) => {\n            if (a._lc_text < b._lc_text) return -order;\n            if (a._lc_text > b._lc_text) return order;\n            return 0;\n        });\n    }\n\n    /**\n     * Remove an item from the list\n     * @param {HTMLElement|Node} el\n     * @return {{value: String|Number, _lc_value: String, _lc_text: String}}\n     * @private\n     */\n    _sliceItem(el) {\n        let items = this.options.items,\n            needle = el.dataset.value.toLowerCase(),\n            current = this.current,\n            item;\n        this.dom.list.removeChild(el);\n        item = items.splice(items.findIndex(item => item._lc_value === needle), 1).shift();\n        if (current && item._lc_value === current._lc_value) this.clearCurrent();\n        return item;\n    }\n}\n"],"names":["d","document","DomComponent","[object Object]","element","options","defaults","this","Object","assign","_events","dom","el","_setElement","event","fn","addEventListener","bind","push","name","filter","removeEventListener","parentNode","removeChild","nodeType","Error","parent","querySelector","detail","CustomEvent","bubbles","cancelable","createEvent","initEvent","dispatchEvent","items","current","allowAdd","proposal","notFound","allowRemove","removalIcon","placeHolder","sort","order","maxHeight","onDelete","onCreate","valueKey","textKey","DomHelper","super","_convertItem","_convertItems","findItem","__found","_sortItems","_renderInit","_bindEvents","input","value","closeOnEvent","e","key","keyCode","contains","target","toggle","on","_search","_handleClick","_handleKey","_renderListItems","show","firstElementChild","classList","blur","_lc_value","_lc_text","_clearSelected","opt","nodeName","dataset","find","item","_setCurrent","toString","_setSelected","list","add","remove","map","toLowerCase","replace","wrap","createElement","className","appendChild","_renderInput","firstChild","_renderList","type","autocomplete","spellcheck","placeholder","style","getCurrent","selected","button","_createRemovalButton","text","forEach","html","innerHTML","_createListItems","term","termLc","indexOf","first","len","length","_proposeItem","_notFoundItem","_tryCreateItem","_trigger","_fireCallback","_sliceItem","trim","_insertItem","a","b","needle","splice","findIndex","shift","clearCurrent"],"mappings":"AAAA,MAAMA,EAAIC,SAEV,MAAqBC,EACjBC,YAAYC,EAASC,EAAU,GAAIC,EAAW,IAC1CC,KAAKF,QAAUG,OAAOC,OAAO,GAAIH,EAAUD,GAE3CE,KAAKG,QAAU,GAEfH,KAAKI,IAAM,CACPC,GAAIL,KAAKM,YAAYT,IAW7BD,GAAGW,EAAOC,EAAIH,EAAK,MAUf,OARCA,GAAML,KAAKI,IAAIC,IAAII,iBAAiBF,EAAOC,EAAKA,EAAGE,KAAKV,OAAO,GAEhEA,KAAKG,QAAQQ,KAAK,CACdC,KAAML,EACNC,GAAIA,EACJH,GAAIA,IAGDL,KAOXJ,aACI,OAAOI,KAAKI,IAAIC,GAOpBT,SACII,KAAKG,QAAUH,KAAKG,QAAQU,OAAON,IACvBA,EAAMF,IAAML,KAAKI,IAAIC,IAAIS,oBAAoBP,EAAMK,KAAML,EAAMC,IAAI,IAE/ER,KAAKI,IAAIC,GAAGU,WAAWC,YAAYhB,KAAKI,IAAIC,IAC5CL,KAAKI,IAAMJ,KAAKF,QAAU,KAS9BF,YAAYS,GACR,IAAKA,IAAOA,EAAGY,UAA0B,iBAAPZ,EAC9B,MAAM,IAAIa,MAAM,gCAEpB,OAAIb,EAAGY,SAAiBZ,GAChBL,KAAKF,QAAQqB,QAAU1B,GAAG2B,cAAcf,GASpDT,SAASgB,EAAMS,EAAS,MACpB,IAAId,EAEuB,mBAAhBe,YACPf,EAAQ,IAAIe,YAAYV,EAAM,CAC1BS,OAAQA,EACRE,SAAS,EACTC,YAAY,KAGhBjB,EAAQd,EAAEgC,YAAY,UAChBC,UAAUd,GAAM,GAAM,GAGhCZ,KAAKI,IAAIC,GAAGsB,cAAcpB,ICvFlC,MAAe,CACXY,OAAQ,KACRS,MAAO,GACPC,QAAS,KACTC,UAAU,EACVC,SAAU,uBACVC,SAAU,8BACVC,aAAa,EACbC,YAAa,UACbC,YAAa,iBACbC,MAAM,EACNC,MAAO,OACPC,UAAW,EACXC,SAAU,KACVC,SAAU,KACVC,SAAU,QACVC,QAAS,SCbb,MAAMjD,EAAIC,wBAEK,cAA0BiD,EACrC/C,YAAYC,EAASC,EAAU,IAC3B8C,MAAM/C,EAASC,EAASC,GACxB,IAAI8B,EAAU/B,EAAQ+B,QAAU7B,KAAK6C,aAAa/C,EAAQ+B,SAAW,KAErE7B,KAAKF,QAAQ8B,MAAQ5B,KAAK8C,cAAchD,EAAQ8B,OAChD5B,KAAK6B,QAAU7B,KAAK+C,SAASlB,EAAQ/B,EAAQ2C,WAG7CzC,KAAKgD,QAAU,KAEXhD,KAAKF,QAAQsC,MAAMpC,KAAKiD,aAE5BjD,KAAKkD,cAELlD,KAAKmD,cAEDnD,KAAK6B,UACL7B,KAAKI,IAAIgD,MAAMC,MAAQrD,KAAK6B,QAAQ/B,EAAQ4C,UAQpD9C,cACI,IAAI0D,EAAeC,IACA,WAAVA,EAAEC,KAAkC,KAAdD,EAAEE,SAAoBzD,KAAKI,IAAIC,GAAGqD,SAASH,EAAEI,SACpE3D,KAAK4D,QAAO,IAIpB5D,KAAK6D,GAAG,QAAS7D,KAAK8D,SACtB9D,KAAK6D,GAAG,QAAS7D,KAAK+D,cACtB/D,KAAK6D,GAAG,QAAS7D,KAAKgE,YACtBhE,KAAK6D,GAAG,UAAW,IAAO7D,KAAKiE,mBAAmBL,QAAO,GAAQ5D,KAAKI,IAAIgD,OAG1EpD,KAAK6D,GAAG,QAASP,EAAc7D,GAC/BO,KAAK6D,GAAG,QAASP,EAAc7D,GAQnCG,SAASY,GAEL,OADAR,KAAKF,QAAQyC,SAAW/B,EACjBR,KAQXJ,SAASY,GAEL,OADAR,KAAKF,QAAQ0C,SAAWhC,EACjBR,KAQXJ,OAAOsE,GAAO,GAGV,OAFAlE,KAAKI,IAAIC,GAAG8D,kBAAkBC,UAAUF,EAAO,SAAW,OAAO,WAC5DA,GAAMlE,KAAKI,IAAIgD,MAAMiB,OACnBrE,KAOXJ,WACI,OAAOI,KAAKF,QAAQ8B,MAOxBhC,WAAW4D,EAAM,MACb,IAAI3B,EAAU5B,OAAOC,OAAO,GAAIF,KAAK6B,SAGrC,cAFOA,EAAQyC,iBACRzC,EAAQ0C,SACRf,EAAM3B,EAAQ2B,GAAO3B,EAQhCjC,eACII,KAAK6B,QAAU,KACf7B,KAAKI,IAAIgD,MAAMC,MAAQ,GACvBrD,KAAKwE,iBAQT5E,SAASyD,GACL,IAAIoB,EAAMzE,KAAKF,QAEf,OADAuD,EAAQA,EAAMqB,SAAWrB,EAAMsB,QAAQtB,MAAQA,EACxCoB,EAAI7C,MAAMgD,KAAKC,GAAQA,EAAKJ,EAAIhC,YAAcY,GAQzDzD,WAAWyD,GAEP,OADArD,KAAK8E,YAAYzB,EAAQrD,KAAK+C,SAASM,GAAS,MACzCrD,KAUXJ,YAAYiF,EAAMxE,EAAK,MASnB,OARAL,KAAKI,IAAIgD,MAAMC,MAAQwB,EAAOA,EAAK7E,KAAKF,QAAQ4C,SAASqC,WAAa,GAClEF,GACA7E,KAAK6B,QAAUgD,EACf7E,KAAKgF,aAAaH,EAAMxE,KAExBL,KAAK6B,QAAU,KACf7B,KAAKwE,kBAEFxE,KASXJ,aAAaiF,EAAMxE,EAAK,MACpBL,KAAKwE,kBACLnE,EAAKA,GAAUL,KAAKI,IAAI6E,KAAK7D,gCAAgCyD,EAAK7E,KAAKF,QAAQ2C,iBACvEpC,EAAG+D,UAAUc,IAAI,cAO7BtF,iBACI,IAAIiC,EAAU7B,KAAKI,IAAI6E,KAAK7D,cAAc,eACtCS,GAASA,EAAQuC,UAAUe,OAAO,cAS1CvF,cAAcgC,EAAQ,IAClB,OAAOA,EAAMwD,IAAIP,GAAQ7E,KAAK6C,aAAagC,IAS/CjF,aAAaiF,GACT,IAAIJ,EAAMzE,KAAKF,QAIf,OAHA+E,EAAuB,iBAATA,EAAoB,CAACjF,CAAC6E,EAAIhC,UAAWoC,EAAMjF,CAAC6E,EAAI/B,SAAUmC,GAAQA,GAC3EP,UAAYO,EAAKJ,EAAIhC,UAAUsC,WAAWM,cAAcC,QAAQ,OAAQ,KAC7ET,EAAKN,SAAWM,EAAKJ,EAAI/B,SAASqC,WAAWM,cAAcC,QAAQ,OAAQ,KACpET,EAQXjF,cACI,IAAI2F,EAAO9F,EAAE+F,cAAc,OAO3B,OALAD,EAAKE,UAAY,kBAEjBzF,KAAKI,IAAIgD,MAAQmC,EAAKG,YAAY1F,KAAK2F,gBAAgBC,WACvD5F,KAAKI,IAAI6E,KAAOM,EAAKG,YAAY1F,KAAK6F,eAAeD,WAE9C5F,KAAKI,IAAIC,GAAGqF,YAAYH,GAQnC3F,eACI,IAAI2F,EAAO9F,EAAE+F,cAAc,OACvBnF,EAAKZ,EAAE+F,cAAc,SAOzB,OANAD,EAAKE,UAAY,WACjBpF,EAAGyF,KAAO,OACVzF,EAAG0F,aAAe,QAClB1F,EAAG2F,YAAa,EAChB3F,EAAG4F,YAAcjG,KAAKF,QAAQqC,YAC9BoD,EAAKG,YAAYrF,GACVkF,EAQX3F,cACI,IAAI2F,EAAO9F,EAAE+F,cAAc,OACvBnF,EAAKZ,EAAE+F,cAAc,MACrBlD,EAAYtC,KAAKF,QAAQwC,UAM7B,OAJAiD,EAAKE,UAAY,UACbnD,IAAWiD,EAAKW,MAAM5D,UAAYA,EAAY,MAClDiD,EAAKG,YAAYrF,GAEVkF,EASX3F,iBAAiBgC,EAAQ,IACrB,IAAIqD,EAAO,GACPR,EAAMzE,KAAKF,QACX+B,EAAU7B,KAAKmG,WAAW1B,EAAIhC,UAC9B2D,EAAW,GACXC,EAAS5B,EAAIxC,YAAcjC,KAAKsG,uBAAyB,GACzDjD,EAAQ,GACRkD,EAAO,GASX,OAPA3E,EAAM4E,QAAQ3B,IACVxB,EAAQwB,EAAKJ,EAAIhC,UACjB8D,EAAO1B,EAAKJ,EAAI/B,SAEhBuC,wBADAmB,EAAWvE,GAAWwB,IAAUxB,EAAU,cAAgB,mBACJwB,MAAUkD,IAAOF,WAGpEpB,EASXrF,iBAAiB6G,EAAO,IAEpB,OADAzG,KAAKI,IAAI6E,KAAKyB,UAAYD,GAAQzG,KAAK2G,iBAAiB3G,KAAKF,QAAQ8B,OAC9D5B,KAQXJ,uBACI,kDAAmDI,KAAKF,QAAQoC,uBAQpEtC,QAAQ2D,GACJ,IAAIzD,EAAUE,KAAKF,QACf8G,EAAOrD,EAAEI,OAAON,MAChBwD,EAASD,EAAKvB,cAAcC,QAAQ,OAAQ,KAC5CL,EAAOnF,EAAQ8B,MAAMf,OAAOgE,IACmB,IAApCA,EAAKP,UAAUwC,QAAQD,KAAqD,IAAnChC,EAAKN,SAASuC,QAAQD,IAE1EJ,EAAOxB,GAAQnF,EAAQgC,SAAW9B,KAAK2G,iBAAiB1B,GAAQ,GAChE8B,EAAQ9B,EAAK,GACb+B,EAAM/B,EAAKgC,OAEH,IAARD,IACAhH,KAAKgD,QAAU+D,IAGfC,EAAM,IAAMA,IAAQJ,KACpB5G,KAAKgD,QAAU,MAGflD,EAAQgC,UAAY8E,KAAUG,GAASF,IAAWE,EAAMxC,UAAYsC,IAAWE,EAAMzC,WACrFmC,GAAQzG,KAAKkH,aAAaN,GAClB9G,EAAQgC,WAChB2E,GAAQzG,KAAKmH,cAAcP,IAG/B5G,KAAKiE,iBAAiBwC,GAS1B7G,aAAagH,GAET,8DAA+DA,MADhD5G,KAAKF,QAAQiC,SAASuD,QAAQ,eAAgBsB,mBAUjEhH,cAAcgH,GAEV,oDADU5G,KAAKF,QAAQkC,SAASsD,QAAQ,eAAgBsB,mBAS5DhH,aAAa2D,GACT,IAAIlD,EAAKkD,EAAEI,OACPS,EAAY/D,EAAG+D,UAEfpE,KAAKF,QAAQgC,UAAYsC,EAAUV,SAAS,eACxC1D,KAAKoH,eAAe/G,EAAGsE,QAAQiC,OAC/B5G,KAAK4D,SAASyD,SAAS,UAAWrH,KAAK6B,SAK3CuC,EAAUV,SAAS,WACnB1D,KAAK8E,YAAY9E,KAAK+C,SAAS1C,GAAKA,GAC/BuD,SACAyD,SAAS,WAAYrH,KAAK6B,SAI/B7B,KAAKF,QAAQmC,aAAemC,EAAUV,SAAS,gBAC/CrD,EAAKA,EAAGU,WACJf,KAAKsH,cAAc,WAAYtH,KAAK+C,SAAS1C,KAC7CL,KAAKqH,SAAS,UAAWrH,KAAKuH,WAAWlH,KAYrDT,cAAcgB,EAAMiE,GAChB,MAAkC,mBAAvB7E,KAAKF,QAAQc,IACbZ,KAAKF,QAAQc,GAAMiE,GAUlCjF,WAAW2D,GACP,IAEIhD,EAFA8C,EAAQE,EAAEI,OAAON,MACjBwB,EAAO7E,KAAKgD,UAGVK,GAAwB,KAAdE,EAAEE,SAA4B,UAAVF,EAAEC,QAIjCqB,GAAQxB,GAASrD,KAAKF,QAAQgC,SAC/BvB,EAAQP,KAAKoH,eAAe/D,GAAS,UAAY,KAC1CwB,IACPtE,EAAQ,WACRP,KAAK8E,YAAYD,IAGjBtE,GAAOP,KAAK4D,SAASyD,SAAS9G,EAAOP,KAAK6B,UASlDjC,eAAeyD,GACX,IAAIwB,EAAO7E,KAAK6C,aAAaQ,EAAMmE,QACnC,QAAKxH,KAAK+C,SAASM,KAAUrD,KAAKsH,cAAc,WAAYzC,KACxD7E,KAAK8E,YAAY9E,KAAKyH,YAAY5C,IAC3B,IAWfjF,YAAYiF,GAGR,OAFA7E,KAAKF,QAAQ8B,MAAMjB,KAAKkE,GACpB7E,KAAKF,QAAQsC,MAAMpC,KAAKiD,aACrB4B,EAOXjF,aACI,IAAIyC,EAA+B,SAAvBrC,KAAKF,QAAQuC,MAAmB,GAAK,EACjDrC,KAAKF,QAAQ8B,MAAMQ,KAAK,CAACsF,EAAGC,IACpBD,EAAEnD,SAAWoD,EAAEpD,UAAkBlC,EACjCqF,EAAEnD,SAAWoD,EAAEpD,SAAiBlC,EAC7B,GAUfzC,WAAWS,GACP,IAGIwE,EAHAjD,EAAQ5B,KAAKF,QAAQ8B,MACrBgG,EAASvH,EAAGsE,QAAQtB,MAAMgC,cAC1BxD,EAAU7B,KAAK6B,QAKnB,OAHA7B,KAAKI,IAAI6E,KAAKjE,YAAYX,GAC1BwE,EAAOjD,EAAMiG,OAAOjG,EAAMkG,UAAUjD,GAAQA,EAAKP,YAAcsD,GAAS,GAAGG,QACvElG,GAAWgD,EAAKP,YAAczC,EAAQyC,WAAWtE,KAAKgI,eACnDnD"}